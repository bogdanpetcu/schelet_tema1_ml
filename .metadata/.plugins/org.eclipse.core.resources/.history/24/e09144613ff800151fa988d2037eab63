package tema_1_ml;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

public class Game {
	
	private static int[][] board;
	private static int boardSize;
	private static int predator_count;
	private static int trap_count;
	private static Pradator[] predators;
	private static Prada prada;
	private static Capcana[] traps;
	
	public static ArrayList<Integer> get_possible_actions() {
		ArrayList<Integer> result = new ArrayList<Integer>();
		int currentX = prada.getPositionX(), currentY = prada.getPositionY();
		
		result.add(Constants.STAY);
		
		//Assuming two animals can't be on the same cell at the same time
		if(currentX - 1 >= 0)
			result.add(Constants.MOVE_LEFT);
		
		if(currentX + 1 < boardSize)
			result.add(Constants.MOVE_RIGHT);
		
		if(currentY - 1 >= 0)
			result.add(Constants.MOVE_UP);
		
		if(currentY + 1 < boardSize)
			result.add(Constants.MOVE_DOWN);
		
		return result;
	}
	
	//Makes a move and updates the state of the board
	public static void make_move(int move) {
		System.out.println("Prada incearca sa se miste");
		
		int newX = prada.getPositionX(), newY = prada.getPositionY();
		
		switch(move) {
		case Constants.STAY:
			System.out.println("Prada ramane pe loc");
			break;
		case Constants.MOVE_DOWN:
			System.out.println("Prada merge in jos");
			newY-=1;
			break;
		case Constants.MOVE_UP:
			System.out.println("Prada merge in sus");
			newY+=1;
			break;
		case Constants.MOVE_LEFT:
			System.out.println("Prada merge la stanga");
			newX-=1;
			break;
		case Constants.MOVE_RIGHT:
			System.out.println("Prada merge la dreapta");
			newX+=1;
			break;
		}
		
		if(newX < 0 || newX >= boardSize || newY < 0 || newY >= boardSize) {
			System.out.println("Unable to make move");
			return;
		}
		
		board[prada.getPositionX()][prada.getPositionY()]=Constants.EMPTY_CELL_TYPE;
		
		if(board[newX][newY] == Constants.PRADATOR_TYPE) {
			for (int i=0; i < predator_count; i++) {
				if(predators[i].getPositionX() == newX && predators[i].getPositionY() == newY) {
					predators[i].setAlive(false);
					break;
				}
			}
		}
		
		board[newX][newY]=Constants.PRADA_TYPE;
		prada.setPositionX(newX);
		prada.setPositionY(newY);
		
		//MISCARE PRADATORI
		for (int i=0; i < predator_count; i++) {
			if(!predators[i].isAlive())
				continue;
			
			//TODO: implement movement logic for predators;
			
			//Dummy version
			
			
			Random x = new Random();
			boolean cont = true;
			
			while(cont) {
				int movement = x.nextInt(5) + 4;
				
				switch(movement) {
				case Constants.STAY:
					break;
				case Constants.MOVE_DOWN:
					newY = predators[i].getPositionY() - 1;
					break;
				case Constants.MOVE_UP:
					newY = predators[i].getPositionY() - 1;
					break;
				case Constants.MOVE_LEFT:
					newX = predators[i].getPositionX() - 1;
					break;
				case Constants.MOVE_RIGHT:
					newX = predators[i].getPositionX() + 1;
					break;
				}
				
				if(newX >= 0 || newX < boardSize || newY >= 0 || newY < boardSize && board[newX][newY] != Constants.PRADATOR_TYPE) {
					cont = false;
				}
			}
			
			board[predators[i].getPositionX()][predators[i].getPositionY()]=Constants.EMPTY_CELL_TYPE;
			board[newX][newY]=Constants.PRADATOR_TYPE;
			predators[i].setPositionX(newX);
			predators[i].setPositionY(newY);
			
		}
	}
	
	public static void print_board() {
		
		System.out.println("X - Spatiu liber\n" + "C - capcanta\n" + "P - prada\n" + "B - pradator");
		String toPrint = " ";
		
		for(int i = 0; i < boardSize; i++) {
			for(int j = 0; j < boardSize; j++) {
				switch(board[i][j]) {
					case Constants.EMPTY_CELL_TYPE: {
						toPrint = "X";
						break;
					}
					case Constants.PRADA_TYPE: {
						toPrint = "P";
						break;
					}
					case Constants.PRADATOR_TYPE: {
						toPrint = "B";
						break;
					}
					case Constants.CAPCANA_TYPE: {
						toPrint = "C";
						break;
					}
				}
				System.out.print(toPrint + " ");
			}
			System.out.println();
		}
	}
	
	public static void initialize_board(String file) throws FileNotFoundException {
		Random rand = new Random();
		int x, y;
		
		Scanner in = new Scanner(new File(file));

		boardSize = in.nextInt();
		predator_count = in.nextInt();
		trap_count = in.nextInt();
		
		predators = new Pradator[predator_count];	
		traps = new Capcana[trap_count];
		prada = new Prada();
		
		if(predator_count < 2) {
			System.out.println("Too few predators");
			return;
		}
		
		board = new int[boardSize][boardSize];
		
		for(int i=0; i < boardSize; i++) {
			for(int j=0; j < boardSize; j++) {
				board[i][j] = Constants.EMPTY_CELL_TYPE;
			}
		}

		x = rand.nextInt(boardSize);
		y = rand.nextInt(boardSize);
		
		board[x][y] = Constants.PRADA_TYPE;

		prada.setRaza_coliziune(in.nextInt());
		prada.setRaza_perceptie(in.nextInt());
		
		prada.setViteza(1);
		prada.setPositionX(x);
		prada.setPositionY(y);
		prada.setAlive(true);
		
		for(int i=0; i < predator_count; i++) {
			x = rand.nextInt(boardSize);
			y = rand.nextInt(boardSize);
			
			while(board[x][y] != Constants.EMPTY_CELL_TYPE) {
				x = rand.nextInt(boardSize);
				y = rand.nextInt(boardSize);				
			}
			
			board[x][y] = Constants.PRADATOR_TYPE;
			
			predators[i] = new Pradator();
			predators[i].setRaza_coliziune(in.nextInt());
			predators[i].setRaza_perceptie(in.nextInt());
			predators[i].setViteza(1);
			predators[i].setPositionX(x);
			predators[i].setPositionY(y);
			predators[i].setAlive(true);
		}
		
		for(int i=0; i < trap_count; i++) {
			x = rand.nextInt(boardSize);
			y = rand.nextInt(boardSize);
			
			while(board[x][y] != Constants.EMPTY_CELL_TYPE) {
				x = rand.nextInt(boardSize);
				y = rand.nextInt(boardSize);				
			}
			
			board[x][y] = Constants.CAPCANA_TYPE;
			traps[i] = new Capcana();
			traps[i].setRaza_influenta(in.nextInt());
			traps[i].setPositionX(x);
			traps[i].setPositionY(y);
		}
		
		in.close();
		
	}
	
	public int game_state() {
		int result = Constants.PREDATORS_LOSE;
		int possibleAttackers = 0;
		
		for (int i=0; i < predator_count; i++) {
			if(predators[i].isAlive()) {
				result = Constants.NEUTRAL_STATE;
				break;
			}
		}
		
		if(result == Constants.PREDATORS_LOSE)
			return result;
		
		
		for (int i=0; i < predator_count; i++) {
			
		}
		
		return result;
	}

	public static void main(String[] args) throws FileNotFoundException {
		String filePath = "/home/bogdanpetcu/tema1ml/input.txt";
		
		initialize_board(filePath);
		
		print_board();
		
	}

}
